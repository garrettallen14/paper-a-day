TRANSACTIONS

16 Jul 2024

Intro
    - Transactions are cryptographically signed instructions from accounts
    - The simplest transaction is transferring ETH from one acc to another

What's a Transaction?
    - Ethereum transaction is an action initiated by an EOA
    - If Bob sends Alice 1 ETH, Bob's accountn must be debited and Alice's must be credited... this state-chanign action takes place within a transaction

    - Transactions, which change the state of the EVM, must be broadcast to the whole network
    - Any node can broadcast a request for a transaction to be executed on the EVM; after this happens, a validator will execute the transaction and propagate the resulting change to the rest of the network

    - Transactions require a fee and must be included in a validated block
    - To make this overview simpler we'll cover gas fees and validation elsewhere
    - A submitted transaction includes the following information:
        - from -- the address of the sender, that will be signing the transaction.
            - This will be an EOA as contract accounts cannot send transactions
        - to -- the receiving address (if an EOA, the transactions will transfer value)
            - If a contact account, the transaction will execute the contract code
        - signature -- the id of the sender.
            - This is generated when the sender's private key signs the transaction and confirms the sender has authorized this transaction
        - nonce -- a sequentially incrementing counter which indicates the transaction number from the account
        - value -- amount of ETH to transfer from sender to recipient (in WEI)
        - input data -- optional field to include arbitrary data
        - gasLimit -- the maximum amount of gas units that can be consumed by the transaction
            - The EVM specifies units of gas required by each computational step
        - maxPriorityFeePerGas -- the maximum price of the consumed gas to be included as a tip to the validator
        - maxFeePerGas -- the maximum fee per unit of gas willing to be paid for the transaction (inclusive baseFeePerGas and maxPriorityFeePerGas)
    - Gas is a reference to the computation required to process the transcation by a validator
    - Users have to pay a fee for this computation
    - The gasLimit and maxPriorityFeePerGas determine the maximum transaction fee paid to the validator

    - A transaction object needs to be signed using the sender's private key
    - This proves that the transaction could only have come from the sender and was not sent fraudulently
    - An Ethereum client like Geth will handle this singing process

    - The data field
        - The vast majority of transactions access a contract from an EOA
        - Most contracts are written in Solidity and interpret their data field in accordance with the application binary interface (ABI)
            - A JSON file that defines the functions and variables included in a smart contract. The ABI allows bytecode to be mapped into human-readable formats
        - The first four bytes specify which function to call, using the hash of the function's name and arguments
        - You can sometimes identify the function from the selector using this database

Types of Transactions
    - On Ethereum there are a few different types of transactions:
        - Regular transactions
        - Contract deployment transactions: a transaction without a "to" address, where the data field is used for the contract code
        - Execution of contract: a transaction that interacts with a deployed smart contract. In this case, "to" address is the smart contract address
    - On gas
        - As mentioned, transactions cost gas to execute
        - Simple transfer transactions require 21000 units of Gas
        - So for Bob to send Alice 1 ETH at a baseFeePerGas ofo 190 gwei and maxPriorityFeePerGas of 10 gwei, Bob will need to pay the following fee:
            - (190 + 10) * 21000 = 4,200,000 gwei, or 0.0042 ETH
        - Bob's accountn will be debited -1.0042 ETH (1 ETH + 0.0042 ETH in gas fees)
        - Alice's account will be credited +1.0 ETH
        - The base fee will be burned -0.00399 ETH
        - Validator keeps the tip +0.000210 ETH
    - Any gas not used in a transaction is refunded to the user account
    - Smart contract interactions
        - Gas is required for any transaction that involves a smart contract
        - Smart contracts can also contain functions known as "view" or "pure" functions
    - As such, calling these functions from an EOA will not require any gas
    - The underlying RPC call for this scenario is eth_call

    - Unlike when accessed eth_call, these view or pure functions are also commonly called internally (ie from the contract itself or from another contract) which does cost gas

Transaction Lifecycle
    - Once the transaction has been submitted the following happens:
        1. A transaction hash is cryptographically generated:
        2. The transaction is then broadcasted to the network and added to a transaction pool consistening of all other pending network transactions
        3. A validator must pick your transaction and include it in a block in order to verify the transaction and consider it "successful"
        4. As time passes the block containing your transaction will be upgraded to "justified" then "finalized"
            - These upgrades make it much more certain that your transaction was successful and willl never be altered
            - Once a block is "finalized" it could only ever be changed by network level attack that would cost many billions of dollars

Typed Transaction Envelope
    - Ethereum originally had one format for transactions
    - Each transaction contained a nonce, gas price, gas limit, to address, value, v, r, and s
    - These fields are RLP-encoded, to look something like this:
        - RLP([nonce, gasPrice, gasLimit, to, value, data, v, r, s])
    - Ethereum has evolved to support multiple types of transactions to allow for new features such as access lists and EIP-1559 to be implemented without affecting legacy transaction formats

    - TransactionType || TransactionPayload
    - Where the fields are defined as:
        - TransactionType -- a number between 0 and 0x7f, for a total of 128 possible transaction types
        - TransactionPayload -- an arbitrary byte array defined by the transaction type
    - Based on the TransactionType value, a transaction can be classified as
        1. Type 0 (Legacy) Transactions: