ETHEREUM ACCOUNTS

4 Jul 2024

Intro
    - Ethereum acc is an entity with an ETH balance that can send transactions on Ethereum
    - Accounts can be user-controlled or deployed as smart contracts

Account Types
    - Externally-owned account (EOA) -- controlled by anyone w/private keys
    - Contract account -- a smart contract deployed to the network, controlled by code
    - Both accounts can: recieve, hold & send ETH/tokens... interact with deployed smart contracts
    - Key differences:
        - Externally-owned:
            - Creating an acc costs nothing
            - Can initiate transactions
            - Transactions between EOA can only be ETH/token transfers
            - Made up of a crypto pair of keys: public/private keys that control acc activities
        - Contract:
            - Creating a contract has a cost bc you're using network storage
            - Can only send transactions in response to receiving a transaction
            - Transactions from an ext acc to a contract acc can trigger code which can execute many different actions, such as transferring tokens or even creating a new contract
            - Contract accounts don't have private keys. Instead, they are controlled by the logic of the smart contract code

Account Examined
    - Ethereum accounts have four fields:
        - Nonce -- A counter that indicates the number of transactions sent from an EOA, or number of contracts created by a contract account.
            - Only one transaction with a given nonce can be executed for each account, protecting against replay attacks where signed transactions are repeatedly broadcast and re-executed
        - Balance -- the number of wei owned
        - codeHash -- The code of an account on the EVM.
            - Contract accounts have code fragments programmed in that can perform different operations
            - This EVM code gets executed if the account gets a message call
            - It cannot be changed, unlike the other account fields
            - All such code fragments are contained in the state database under their corresponding hases for later retrieval
            - This hash value is known as codeHash
            - For EOA, the codeHash is hash for empty string
        - storageRoot -- aka a storage hash. A 256-bit hash of the root node of a Merkle Patricia trie that encodes the storage contents of the account (a mapping between 256-bit int values), encoded into the trie as a mapping from the Keccak 256-bit hash of the 256-bit integer keys to the RLP-encoded 256-bit integer values
        - This trie encodes the hash of the storage contents of this account, and is empty by default

EOA and Key Pairs
    - An account is made up of a pair of crypto keys: public/private
    - They help prove that a transaction was actually signed by the sender and prevents forgeries
    - Private key is what you use to sign transactions, so it grants you custody over the funds associated with your account... you hold private keys, not crypto... the funds are always on Ethereum's ledger

Account creation
    - When you want to create an account, most libraries will generate you a random private key
    - Private key is made of 64 hex characters and can be encrypted w/ a password
    - Ex:
        - Public key is generated from the private key using the Elliptic Curve Digital Signature Algorithm
        - You get a public address for your account by taking the last 20 bytes of the Keccak-256 hash of the public key and adding 0x to the beginning
        - An EOA has a 42-char address (20-byte segment which is 40 hexadecimal characters plus the 0x prefix)
    - The following example shows how to use a signing tool called Clef to generate a new account.
    - Clef is an account management and signing tool that comes bundled with the Ethereum client, Geth
    - clef newaccount command creates a new key pair and stores them in an encrypted keystore
    - It is possible to derive new public keys from your private key, but you cannot derive a private key from public keys
    - It is vital to keep your private keys safe

Contract Accounts
    - Contract accounts also have a 42 char hexadecimal address
    - Contract address is usually given when a contract is deployed to the Eth blockchain. The address comes from the creator's address and the num of transactions sent from that address (the nonce)

Validator Keys
    - Another type of key in Ethereum, introuced when Ethereum switched from proof-of-work to proof-of-stake based consensus
    - "BLS" keys are used to identify validators
    - Keys can be efficiently aggregated to reduce bandwidth required for the network to come to consensus
    - Without this key aggregation the min stake for a validator would be much higher

Visual Demo
    - 