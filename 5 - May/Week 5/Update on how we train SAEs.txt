
Update on how we train SAEs
Tom Conerly, Adly Templeton, Trenton Bricken, Jonathan Marcus, Tom Henighan
We’ve made improvements to how we train SAEs since Towards Monosemanticity with the goal of lowering the SAE loss. While the new setup is a significant improvement over what we published in Towards Monosemanticity we believe there are further improvements to be made. We haven’t ablated every decision so it’s likely some simplifications could be made. This work was explicitly focused on lowering loss and didn’t grapple with loss not being the ultimate objective we care about. Here’s a summary of our current SAE training setup:

Let 
𝑛
n be the input and output dimension and 
𝑚
m be the autoencoder hidden layer dimension. Let 
𝑠
s be the size of the dataset. Given encoder weights 
𝑊
𝑒
∈
𝑅
𝑚
×
𝑛
W 
e
​
 ∈R 
m×n
 , decoder weights 
𝑊
𝑑
∈
𝑅
𝑛
×
𝑚
W 
d
​
 ∈R 
n×m
 , and biases 
𝑏
𝑒
∈
𝑅
𝑚
,
𝑏
𝑑
∈
𝑅
𝑛
b 
e
​
 ∈R 
m
 ,b 
d
​
 ∈R 
n
 , the operations and loss function over a dataset 
𝑋
∈
𝑅
𝑠
,
𝑛
X∈R 
s,n
  are:

𝑓
(
𝑥
)
=
ReLU
(
𝑊
𝑒
𝑥
+
𝑏
𝑒
)
𝑥
^
=
𝑊
𝑑
𝑓
(
𝑥
)
+
𝑏
𝑑
𝐿
=
1
∣
𝑋
∣
∑
𝑥
∈
𝑋
∣
∣
𝑥
−
𝑥
^
∣
∣
2
2
+
𝜆
∑
𝑖
∣
𝑓
𝑖
(
𝑥
)
∣
∣
∣
𝑊
𝑑
,
𝑖
∣
∣
2
f(x)
x
^
 
L
​
  
=ReLU(W 
e
​
 x+b 
e
​
 )
=W 
d
​
 f(x)+b 
d
​
 
= 
∣X∣
1
​
  
x∈X
∑
​
 ∣∣x− 
x
^
 ∣∣ 
2
2
​
 +λ 
i
∑
​
 ∣f 
i
​
 (x)∣∣∣W 
d,i
​
 ∣∣ 
2
​
 
​
 

Note that the columns of 
𝑊
𝑑
W 
d
​
  have an unconstrained L2 norm (in Towards Monosemanticity they were constrained to norm one) and the sparsity penalty (second term) has been changed to include the L2 norm of the columns of 
𝑊
𝑑
W 
d
​
 . We believe this was the most important change we made from Towards Monosemanticity.

𝑏
𝑒
b 
e
​
  and 
𝑏
𝑑
b 
d
​
  are initialized to all zeros. The elements of 
𝑊
𝑑
W 
d
​
  are initialized such that the columns point in random directions and have fixed L2 norm of 0.05 to 1 (set in an unprincipled way based on 
𝑛
n and 
𝑚
m, 0.1 is likely reasonable in most cases). 
𝑊
𝑒
W 
e
​
  is initialized to 
𝑊
𝑑
𝑇
W 
d
T
​
 .

The rows of the dataset 
𝑋
X are shuffled. The dataset is scaled by a single constant such that 
𝐸
𝑥
∈
𝑋
[
∣
∣
𝑥
∣
∣
2
]
=
𝑛
E 
x∈X
​
 [∣∣x∣∣ 
2
​
 ]= 
n
​
 . The goal of this change is for the same value of 
𝜆
λ to mean the same thing across datasets generated by different size transformers.

During training we use Adam optimizer beta1=0.9, beta2=0.999 and no weight decay. Our learning rate varies based on scaling laws, but 5e-5 is a reasonable default. The learning rate is decayed linearly to zero over the last 20% of training. We vary training steps based on scaling laws, but 200k is a reasonable default. We use batch size 2048 or 4096 which we believe to be under the critical batch size. The gradient norm is clipped to 1 (using clip_grad_norm). We vary 
𝜆
λ during training, it is initially 0 and linearly increases to its final value over the first 5% of training steps. A reasonable default for 
𝜆
λ is 5.

We do not use resampling or ghost grads because less than 1% of our features are dead at the end of training (dead means not activating for 10 million samples). We don’t do any fine tuning after training.

Conceptually a feature’s activation is now 
𝑓
𝑖
∣
∣
𝑊
𝑑
,
𝑖
∣
∣
2
f 
i
​
 ∣∣W 
d,i
​
 ∣∣ 
2
​
  instead of 
𝑓
𝑖
f 
i
​
 . To simplify our analysis code we construct a model which makes identical predictions but has an L2 norm of 1 on the columns of 
𝑊
𝑑
W 
d
​
 . We do this by 
𝑊
𝑒
′
=
𝑊
𝑒
∣
∣
𝑊
𝑑
∣
∣
2
W 
e
′
​
 =W 
e
​
 ∣∣W 
d
​
 ∣∣ 
2
​
 , 
𝑏
𝑒
′
=
𝑏
𝑒
∣
∣
𝑊
𝑑
∣
∣
2
b 
e
′
​
 =b 
e
​
 ∣∣W 
d
​
 ∣∣ 
2
​
 , 
𝑊
𝑑
′
=
𝑊
𝑑
∣
∣
𝑊
𝑑
∣
∣
2
W 
d
′
​
 = 
∣∣W 
d
​
 ∣∣ 
2
​
 
W 
d
​
 
​
  and 
𝑏
𝑑
′
=
𝑏
𝑑
b 
d
′
​
 =b 
d
​
 .

Potential areas for improvement
Our initialization likely needs improvement. As we increase 
𝑚
m the reconstruction loss at initialization increases. This may cause problems for sufficiently large 
𝑚
m. Potentially with improved initialization we could remove gradient clipping.

We haven’t seen improvements in loss from resampling or ghost grads, but it’s possible resampling “low value” features would improve loss.

It’s plausible some sort of post training (for example Addressing Feature Suppression in SAEs) would be helpful.

Improving shrinkage is an area for improvement.

There are likely other areas for improvement we don’t know about.

Results
Given a fixed dataset 
𝑋
X as we increase 
𝑚
m the loss consistently decreases. We’ve been able to increase 
𝑚
m to single digit millions without issues. This holds across a variety of transformer sizes and mlp activations or the residual stream. Our setup from Towards Monosemanticity would frequently have higher loss, many dead features, or many nearly identical features when run with large values of 
𝑚
m.

We make changes to our training setup by looking at loss across a variety of values of 
𝜆
λ, 
𝑚
m, transformer sizes, and mlp or residual stream runs. We’re generally excited by a change that consistently decreases loss by at least 1%, or a change with roughly equal loss that simplifies our training setup. With our setup, comparing runs on (L0, MSE) or (L0, % of MLP loss recovered) requires care because L0 can be unstable. For example we’ve had cases where training twice as long with half the number of features leads to a <1% change in MSE and L1 but a 30% decrease in L0.

Here are some results from small models. All runs have 131,072 features, 200k train steps, batch size 4096. Note that L1 of f depends on our specific normalization of activations.

Type of Run

Lambda

L0(f)

L1(f)

Normalized MSE

Frac Cross Entropy Loss Recovered

1L MLP

2

99.62386

17.22560

0.03054

0.98305

1L MLP

5

38.68729

11.59591

0.06609

0.96398

1L MLP

10

20.06870

7.12194

0.13120

0.91426

4L MLP (layer 2)

2

264.02930

95.03488

0.06824

0.96824

4L MLP (layer 2)

5

69.92758

56.92384

0.12546

0.92904

4L MLP (layer 2)

10

26.48456

39.42661

0.18485

0.88438

4L Residual Stream (layer 2)

2

81.58595

30.37323

0.09543

0.9572

4L Residual Stream (layer 2)

5

33.23121

19.12259

0.16295

0.90443

4L Residual Stream (layer 2)

10

8.71466

12.53889

0.25455

0.83883


NOTES PORTION:

Improvements on training SAEs with goal of lowering SAE loss
    - New setup is significant improvement over "Towards Monosemanticity"
    - Have not ablated every decision, so it's likely simplifications can be made

    - n input and output dim, m the AE hidden layer dim
    - s dataset size
    - Encoder weights We in Rmxn, Decoder weights Wd in Rnxm
    - Biases be in Rm, bd in Dn
    - Operations and loss function over a dataset X in Rx,n are:
        - ReLU
        - L2 norm + Reconstruction loss (?)

    - be and bd are initialized to all zeros
    - Elements of Wd are initialized s.t. the columns point in random directions and have fixed L2 norm of 0.05 to 1

    - 1L MLPs, 4L MLPs, residual streams