Raising the bar on SWE-bench Verified with Claude 3.5 Sonnet

30 Oct 2024

Abstract
    - Claude 3.(6) achieved 49% on SWEbench verified
    - This post explains the "agent" we built around the model


Introduction
    - SWEbench evaluates an "agent" system
    - Not yet saturated
    - Measures the "agent" not a model in isolation
    - "Open-source developers and startups have had great success in optimizing scaffoldings to greatly improve the performance around the same model."

    - SWE-bench-Verified is 500 problem subset


Achieving SOTA
Tool Using Agent
    - Philosophy was give as much control as possible to the LLM itself
        - Keep scaffolding minimal
    - Agent has:
        - Prompt
        - Bash Tool for executing bash commands
        - Edit Tool for viewing and editing files and directories
    - We sample until the model decides it is finished, or exceeds its 200k context length
    - This scaffold allows the model to use its own judgment rather than be hardcoded into a particular pattern or workflow

    - The prompt outlines a suggested approach for the model, but it's not overly long or too detailed for this task
    - The model is free to choose how it moves from step to step, rather than having strict and discrete transitions

    - "If you are not token-sensitive, it can help to explicitly encourage the model to produce a long response."

    - The model's first tool executes Bash commands. The schema is simple, taking only the command to be run in the environment. Howver, the description of the tool carries more weight. It includes more detailed instructions for the model, including escaping inputs, lack of internet access, and how to run commands in the background.
    - The model's second tool (Edit Tool) is more complex, and contains everything the model needs for viewing, creating and editing files. Again, our tool description contains detailed information for the model about how to use the tool

    - We believe that much more attention should go into designing tool interfaces for models, in the same way that a large amount of attention goes into designing tool interfaces for humans

    - We improved performance by "error-proofing" our tools.
        - Sometimes models could mess up relative file paths after the agent had moved out of the root directory
        - To prevent this, we simply made the tool always require an absolute path
    - We experimented with several different strategies for specifying edits to existing files and had the highest reliability with string replacement, where the model specifies 'old_str' to replace with 'new_str' in the given file
    - If there are more or fewer matches, the model is shown an appropriate error message for it to retry




INITIAL PROMPT:
"""
<uploaded_files>
{location}
</uploaded_files>
I've uploaded a python code repository in the directory {location} (not in /tmp/inputs). Consider the following PR description:

<pr_description>
{pr_description}
</pr_description>

Can you help me implement the necessary changes to the repository so that the requirements specified in the <pr_description> are met?
I've already taken care of all changes to any of the test files described in the <pr_description>. This means you DON'T have to modify the testing logic or any of the tests in any way!

Your task is to make the minimal changes to non-tests files in the {location} directory to ensure the <pr_description> is satisfied.

Follow these steps to resolve the issue:
1. As a first step, it might be a good idea to explore the repo to familiarize yourself with its structure.
2. Create a script to reproduce the error and execute it with `python <filename.py>` using the BashTool, to confirm the error
3. Edit the sourcecode of the repo to resolve the issue
4. Rerun your reproduce script and confirm that the error is fixed!
5. Think about edgecases and make sure your fix handles them as well

Your thinking should be thorough and so it's fine if it's very long.
"""

BASH TOOL:
"""
{
   "name": "bash",
   "description": "Run commands in a bash shell\n
* When invoking this tool, the contents of the \"command\" parameter does NOT need to be XML-escaped.\n
* You don't have access to the internet via this tool.\n
* You do have access to a mirror of common linux and python packages via apt and pip.\n
* State is persistent across command calls and discussions with the user.\n
* To inspect a particular line range of a file, e.g. lines 10-25, try 'sed -n 10,25p /path/to/the/file'.\n
* Please avoid commands that may produce a very large amount of output.\n
* Please run long lived commands in the background, e.g. 'sleep 10 &' or start a server in the background.",
   "input_schema": {
       "type": "object",
       "properties": {
           "command": {
               "type": "string",
               "description": "The bash command to run."
           }
       },
       "required": ["command"]
   }
}
"""

EDIT TOOL:
"""
{
   "name": "str_replace_editor",
   "description": "Custom editing tool for viewing, creating and editing files\n
* State is persistent across command calls and discussions with the user\n
* If `path` is a file, `view` displays the result of applying `cat -n`. If `path` is a directory, `view` lists non-hidden files and directories up to 2 levels deep\n
* The `create` command cannot be used if the specified `path` already exists as a file\n
* If a `command` generates a long output, it will be truncated and marked with `<response clipped>` \n
* The `undo_edit` command will revert the last edit made to the file at `path`\n
\n
Notes for using the `str_replace` command:\n
* The `old_str` parameter should match EXACTLY one or more consecutive lines from the original file. Be mindful of whitespaces!\n
* If the `old_str` parameter is not unique in the file, the replacement will not be performed. Make sure to include enough context in `old_str` to make it unique\n
* The `new_str` parameter should contain the edited lines that should replace the `old_str`",
   "input_schema": {
       "type": "object",
       "properties": {
           "command": {
               "type": "string",
               "enum": ["view", "create", "str_replace", "insert", "undo_edit"],
               "description": "The commands to run. Allowed options are: `view`, `create`, `str_replace`, `insert`, `undo_edit`."
           },
           "file_text": {
               "description": "Required parameter of `create` command, with the content of the file to be created.",
               "type": "string"
           },
           "insert_line": {
               "description": "Required parameter of `insert` command. The `new_str` will be inserted AFTER the line `insert_line` of `path`.",
               "type": "integer"
           },
           "new_str": {
               "description": "Required parameter of `str_replace` command containing the new string. Required parameter of `insert` command containing the string to insert.",
               "type": "string"
           },
           "old_str": {
               "description": "Required parameter of `str_replace` command containing the string in `path` to replace.",
               "type": "string"
           },
           "path": {
               "description": "Absolute path to file or directory, e.g. `/repo/file.py` or `/repo`.",
               "type": "string"
           },
           "view_range": {
               "description": "Optional parameter of `view` command when `path` points to a file. If none is given, the full file is shown. If provided, the file will be shown in the indicated line number range, e.g. [11, 12] will show lines 11 and 12. Indexing at 1 to start. Setting `[start_line, -1]` shows all lines from `start_line` to the end of the file.",
               "items": {
                   "type": "integer"
               },
               "type": "array"
           }
       },
       "required": ["command", "path"]
   }
}